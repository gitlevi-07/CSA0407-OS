#include <stdio.h>--
struct Process {
    int id, at, bt, rt, ct, tat, wt;
};

int main() {
    int n, tq, t = 0, done = 0;
    float avgTAT = 0, avgWT = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];
    int queue[100], front = 0, rear = 0, visited[n];

    for (int i = 0; i < n; i++) {
        p[i].id = i + 1;
        printf("Enter Arrival Time and Burst Time for P%d: ", i + 1);
        scanf("%d %d", &p[i].at, &p[i].bt);
        p[i].rt = p[i].bt;
        visited[i] = 0;
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &tq);

    int idx = -1, minAT = 1e9;
    for (int i = 0; i < n; i++) {
        if (p[i].at < minAT) {
            minAT = p[i].at;
            idx = i;
        }
    }

    t = p[idx].at;
    queue[rear++] = idx;
    visited[idx] = 1;

    printf("\nGantt Chart: ");

    while (front < rear) {
        int i = queue[front++];
        printf(" | P%d |", p[i].id);

        if (p[i].rt > tq) {
            p[i].rt -= tq;
            t += tq;
        } else {
            t += p[i].rt;
            p[i].rt = 0;
            p[i].ct = t;
            p[i].tat = p[i].ct - p[i].at;
            p[i].wt = p[i].tat - p[i].bt;
            avgTAT += p[i].tat;
            avgWT += p[i].wt;
            done++;
        }

        for (int j = 0; j < n; j++) {
            if (!visited[j] && p[j].at <= t) {
                queue[rear++] = j;
                visited[j] = 1;
            }
        }

        if (p[i].rt > 0)
            queue[rear++] = i;

        if (front == rear && done < n) {
            for (int j = 0; j < n; j++) {
                if (!visited[j]) {
                    t = p[j].at;
                    queue[rear++] = j;
                    visited[j] = 1;
                    break;
                }
            }
        }
    }

    printf("\n\nPID\tAT\tBT\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++)
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n",
               p[i].id, p[i].at, p[i].bt,
               p[i].ct, p[i].tat, p[i].wt);

    printf("\nAvg TAT = %.2f\nAvg WT = %.2f\n", avgTAT / n, avgWT / n);

    return 0;
}
